package Ihm;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.util.GregorianCalendar;

import javax.swing.ImageIcon;
import javax.swing.JPanel;

import Bizz.Smap;

/**
 * Vue de la partie
 * @author Jean-Vital
 *
 */
public class IhmPartieVue extends JPanel {

	private static final long serialVersionUID = 1L;
	
	//private Smap map;
	private GregorianCalendar dateDebut;
	
	private IhmPartieModel partieModel;

	private int x=600, y=550;	// Taille du plateau de jeu (en px)
	
	private int nb_elem_largeur;
	private int nb_elem_hauteur;
	
	private int posX_elem_SG; // Position x de l'élément supérieur gauche du plateau de jeu
	private int posY_elem_SG; // Position y de l'élément supérieur gauche du plateau de jeu

	
	private int tailleElements = 40;
	private int[][] tabMap;
	private int[][] tabMapOriginal;
	private boolean mapInitialisee = false;
	
	private int maxX, maxY;

	private ImageIcon vide;
	private ImageIcon mur;
	private ImageIcon chemin;
	private ImageIcon trouVide;
	private ImageIcon trouPlein;
	private ImageIcon oeuf;
	private ImageIcon max;

	private ImageIcon maxH;
	private ImageIcon maxG;
	private ImageIcon maxB;
	private ImageIcon maxD;
		
	
	public IhmPartieVue(Smap smap, IhmPartieModel partieModel) {

		this.setLayout(new GridLayout());
				
		this.partieModel = partieModel;
		//this.map = smap;
		this.dateDebut = new GregorianCalendar();
		this.tabMap = smap.getComposition().clone();
		this.tabMapOriginal = new int[tabMap.length][tabMap[0].length];
		for (int i = 0; i < tabMap.length; i++) {
			for (int j = 0; j < tabMap[0].length; j++) {
				tabMapOriginal[i][j] = tabMap[i][j];
			}
		}
			
		this.setBackground(Param.COLOR_BACKGROUND_GAME);
		
		initialisationDesVE();
		
		initialisationDesImages();
		
		this.setPreferredSize(new Dimension(WIDTH*2, HEIGHT));
		
		this.repaint();
		this.revalidate();
		
	}

	private void initialisationDesImages() {

		// On initialise les surfaces
		vide = new ImageIcon(Param.vide.getImage().getScaledInstance(tailleElements, tailleElements, 1));
		mur = new ImageIcon(Param.boite.getImage().getScaledInstance(tailleElements, tailleElements, 1));
		chemin = new ImageIcon(Param.chemin.getImage().getScaledInstance(tailleElements, tailleElements, 1));
		trouVide = new ImageIcon(Param.star1.getImage().getScaledInstance(tailleElements, tailleElements, 1));
		trouPlein = new ImageIcon(Param.star2.getImage().getScaledInstance(tailleElements, tailleElements, 1));
		oeuf = new ImageIcon(Param.oeuf.getImage().getScaledInstance((tailleElements/2), (tailleElements/2), 1));
		max = new ImageIcon(Param.max_0.getImage().getScaledInstance(tailleElements, tailleElements, 1));

		maxH = new ImageIcon(Param.max_0.getImage().getScaledInstance(tailleElements, tailleElements, 1));
		maxG = new ImageIcon(Param.max_6.getImage().getScaledInstance(tailleElements, tailleElements, 1));
		maxB = new ImageIcon(Param.max_4.getImage().getScaledInstance(tailleElements, tailleElements, 1));
		maxD = new ImageIcon(Param.max_2.getImage().getScaledInstance(tailleElements, tailleElements, 1));

				
	}

	private void initialisationDesVE() {

		nb_elem_hauteur = Math.round(y/tailleElements);
		nb_elem_largeur = Math.round(x/tailleElements);
		
		//System.out.println("nb elem: X:"+nb_elem_largeur+", Y:"+nb_elem_hauteur);
		//System.out.println("taille map X:"+map.getLargeur()+", Y:"+map.getHauteur());
		
		posX_elem_SG = Math.round( (nb_elem_largeur/2) - (tabMap.length/2)); 
		posY_elem_SG = Math.round( (nb_elem_hauteur/2) - (tabMap[0].length/2)); 
				
		//System.out.println();
	}


	public void paint(Graphics g) {
		
		// On défini la taille totale du jeu
		/*
		System.out.println("nb elem: X:"+nb_elem_largeur+", Y:"+nb_elem_hauteur);
		System.out.println("taille map X:"+map.getLargeur()+", Y:"+map.getHauteur());
		System.out.println("pos_elem sup gauche: X:"+posX_elem_SG+", Y"+posY_elem_SG);
		System.out.println();
		*/
		
		// On actualise la map en gros
		for (int i = 0; i <= nb_elem_largeur; i++) {
			for (int j = 0; j <= nb_elem_hauteur; j++) {
				// On positionne 
				
				//System.out.print("on positionne en : X:"+i+", Y:"+j);
				
				if ((i < posX_elem_SG || i >= posX_elem_SG+tabMap.length) 
						|| (j < posY_elem_SG || j >= posY_elem_SG+tabMap[0].length)) {
							vide.paintIcon(this, g, i*tailleElements, j*tailleElements);
							//System.out.print(" - ok");
				}
				//System.out.println();
			}
		}		
		
		// On parcours le tableau pour placer tous le elements de la map
		for (int k = 0; k < tabMap.length; k++) {
			for (int l = 0; l < tabMap[0].length; l++) {
				/*
				 * 0 : vide
				 * 1 : mur (entour le jeu)
				 * 2 : chemin (pratiquable par slayer)
				 * 3 : trou (la ou il faut mettre la boite)
				 * 4 : oeuf (position d'une boite (donc un chemin aussi)
				 * 5 : position de début du personnage
				 */
				if (tabMap[k][l] == 0)
					vide.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);
				
				if (tabMap[k][l] == 1)
					mur.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);
				
				if (tabMap[k][l] == 2)
					chemin.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);
				
				if (tabMapOriginal[k][l] == 3 && tabMap[k][l] == 3) {
					// Trou vide
					chemin.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);				
					trouVide.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);
				} else if (tabMapOriginal[k][l] == 3 && tabMap[k][l] == 4) {
					// Trou rempli
					chemin.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);				
					trouPlein.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);				
					//oeuf.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (k2+posY_elem_SG)*tailleElements);				
				} else if (tabMapOriginal[k][l] == 3 && tabMap[k][l] == 5) {
					// Trou pietiné 
					chemin.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);
					trouVide.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);				
					max.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);				
				}
				if (tabMap[k][l] == 4) {
					if (tabMapOriginal[k][l] != 3)
						chemin.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);
					oeuf.paintIcon(this, g, (k+posX_elem_SG)*tailleElements+(tailleElements/4), (l+posY_elem_SG)*tailleElements+tailleElements/4);
				}
				if (tabMap[k][l] == 5) {
					if (tabMapOriginal[k][l] != 3)
						chemin.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);
					max.paintIcon(this, g, (k+posX_elem_SG)*tailleElements, (l+posY_elem_SG)*tailleElements);	
					maxX = k;
					maxY = l;
				}
			}	
		}
	}

	/*
	 * ACTION DE DEPLACEMENT
	 */
	public void depHaut() {
		max = maxH;
		deplacement(0, -1);
	}

	public void depGauche() {
		max = maxG;
		deplacement(-1, 0);
	}

	public void depBas() {
		max = maxB;
		deplacement(0, 1);
	}

	public void depDroite() {
		max = maxD;
		deplacement(1, 0);		
	}
	
	/**
	 * calcule le deplacement 
	 * @param direction maxX ou maxY + 1 ou + -1
	 */
	private void deplacement(int x, int y) {
		/*
		 * 0 : vide
		 * 1 : mur (entour le jeu)
		 * 2 : chemin (pratiquable par slayer)
		 * 3 : trou (la ou il faut mettre la boite)
		 * 4 : oeuf (position d'une boite (donc un chemin aussi)
		 * 5 : position de début du personnage
		 */
		System.out.println("X:"+x+" - Y:"+y);
		if (tabMap[maxX+x][maxY+y] == 1) {
			// S'i va dans une boite
		} else if (tabMap[maxX+x][maxY+y] == 2 || tabMap[maxX+x][maxY+y] == 3) {
			tabMap[maxX+x][maxY+y] = 5;
			tabMap[maxX][maxY] = 2;	
		} // s'il va sur un oeuf
		else if (tabMap[maxX+x][maxY+y] == 4) {
			if (tabMap[maxX+x+x][maxY+y+y] == 2 || tabMap[maxX+x+x][maxY+y+y] == 3) {
				tabMap[maxX+x+x][maxY+y+y] = 4;
				tabMap[maxX+x][maxY+y] = 5;
				tabMap[maxX][maxY] = 2;
			}
		}
		
		if (tabMapOriginal[maxX][maxY] == 3) {
			tabMap[maxX][maxY] = 3;	
		}
		
		partieModel.repaint();

		// Si partie gagnée
		if (partieGagnee()) {
			partieModel.gagne();
		}
		
	}

	private boolean partieGagnee() {
		for (int i = 0; i < tabMap.length; i++) {
			for (int j = 0; j < tabMap[0].length; j++) {
				if (tabMapOriginal[i][j] == 3 && tabMap[i][j] != 4)
					return false;
			}
		}
		return true;
	}
	
}
